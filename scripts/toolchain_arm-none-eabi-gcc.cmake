cmake_minimum_required(VERSION 3.10)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(TOOLCHAIN_PREFIX arm-none-eabi-)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

if(DEFINED ENV{TOOLCHAIN_PATH})
  set(TOOLCHAIN_PATH $ENV{TOOLCHAIN_PATH})
else()
  message(FATAL_ERROR "Please set environment variable \"TOOLCHAIN_PATH\" first.")
endif()

find_program(CMAKE_C_COMPILER NAMES ${TOOLCHAIN_PREFIX}gcc)
find_program(CMAKE_ASM_COMPILER NAMES ${TOOLCHAIN_PREFIX}gcc)
find_program(CMAKE_CXX_COMPILER NAMES ${TOOLCHAIN_PREFIX}g++)
find_program(CMAKE_OBJCOPY NAMES ${TOOLCHAIN_PREFIX}objcopy)
find_program(CMAKE_OBJDUMP NAMES ${TOOLCHAIN_PREFIX}objdump)

find_program(ARM_SIZE_EXECUTABLE NAMES arm-none-eabi-size)
find_program(ARM_GDB_EXECUTABLE NAMES arm-none-eabi-gdb)
find_program(OPENOCD_EXECUTABLE NAMES openocd)

message(STATUS "${ARM_SIZE_EXECUTABLE}")
message(STATUS "${ARM_GDB_EXECUTABLE}")
message(STATUS "${OPENOCD_EXECUTABLE}")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
